/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UIPatientDoctorInsuranceProvider;

import DataStore.Appointment;
import Doctor.Doctor;
import EcoSystem.EcoSystem;
import Enterprise.Enterprise;
import Personnel.PersonDetails;
import SysAdminUI.Login;
import Utils.ConsoleLogger;
import Utils.NextScreen;
import Utils.ViewPersonRatingsJPanel;
import java.awt.Image;
import java.util.Collections;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ankur Bywar
 */
public class DoctorWorkAreaPanel extends javax.swing.JPanel implements NextScreen{
    JPanel WorkAreaPanel;
    Doctor doctor;
    JFrame mainJFrame;
    EcoSystem ecoSystem;
    Enterprise hospital;
    ConsoleLogger log = ConsoleLogger.getLogger();
    /**
     * Creates new form DoctorWorkAreaPanel
     */
    public DoctorWorkAreaPanel(JPanel WorkAreaPanel, EcoSystem ecoSystem, Enterprise hospital, Doctor doctor) {
        initComponents();
        this.setSize(1100,850);
        this.WorkAreaPanel = WorkAreaPanel;
        this.doctor = doctor;
        this.ecoSystem =ecoSystem;
        this.hospital = hospital;
        populateUpcomingAppointments();
        populateDoctorInfoPlaceholders();
        populateCompletedAppointments(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPatientDetailPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCompletedPatientAppointments = new javax.swing.JTable();
        lblAddress = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        lblPhoneNumber = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        imgLogo = new javax.swing.JLabel();
        lblPatientDetails = new javax.swing.JLabel();
        lblNamePlaceHolder = new javax.swing.JLabel();
        lblDob1 = new javax.swing.JLabel();
        lblDobPlaceHolder = new javax.swing.JLabel();
        lblPhoneNumberPlaceHolder = new javax.swing.JLabel();
        lblAddressPlaceHolder = new javax.swing.JLabel();
        lblSearchByDate = new javax.swing.JLabel();
        txtPatientUserNameSearch = new javax.swing.JTextField();
        jUserNameSearchBtn = new javax.swing.JButton();
        btnOldAppointmentDetails = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();
        btnNewAppointmentDetails2 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblUpcomingPatientAppointments = new javax.swing.JTable();
        btnViewRatings = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        jPatientDetailPanel.setOpaque(false);
        jPatientDetailPanel.setPreferredSize(new java.awt.Dimension(1000, 1000));
        jPatientDetailPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblCompletedPatientAppointments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Appointment id", "Patient Name", "Doctor Name", "Appointment Date", "Appointment Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblCompletedPatientAppointments);

        jPatientDetailPanel.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(108, 619, 790, 170));

        lblAddress.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblAddress.setText("Address:");
        jPatientDetailPanel.add(lblAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 170, -1, -1));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setText("Upcoming Appointments");
        jPatientDetailPanel.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 280, 190, 30));

        lblPhoneNumber.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblPhoneNumber.setText("Phone Number:");
        jPatientDetailPanel.add(lblPhoneNumber, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 140, -1, -1));

        lblName.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblName.setText("Name:");
        jPatientDetailPanel.add(lblName, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 80, -1, -1));

        imgLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images_icons/user1new.png"))); // NOI18N
        imgLogo.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPatientDetailPanel.add(imgLogo, new org.netbeans.lib.awtextra.AbsoluteConstraints(101, 86, 120, 120));

        lblPatientDetails.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblPatientDetails.setText(" Doctor Dashboard");
        jPatientDetailPanel.add(lblPatientDetails, new org.netbeans.lib.awtextra.AbsoluteConstraints(73, 20, 218, 40));

        lblNamePlaceHolder.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        lblNamePlaceHolder.setText("NamePlaceHolder");
        jPatientDetailPanel.add(lblNamePlaceHolder, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 80, -1, -1));

        lblDob1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblDob1.setText("Date Of Birth:");
        jPatientDetailPanel.add(lblDob1, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 110, -1, -1));

        lblDobPlaceHolder.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        lblDobPlaceHolder.setText("DobPlaceHolder");
        jPatientDetailPanel.add(lblDobPlaceHolder, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 110, -1, -1));

        lblPhoneNumberPlaceHolder.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        lblPhoneNumberPlaceHolder.setText("Phone Number Place Holder");
        jPatientDetailPanel.add(lblPhoneNumberPlaceHolder, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 140, -1, -1));

        lblAddressPlaceHolder.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        lblAddressPlaceHolder.setText("AddressPlaceHolder");
        jPatientDetailPanel.add(lblAddressPlaceHolder, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 170, -1, -1));

        lblSearchByDate.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblSearchByDate.setText("Filter by Patient ID");
        jPatientDetailPanel.add(lblSearchByDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 560, -1, -1));

        txtPatientUserNameSearch.setFont(new java.awt.Font("sansserif", 0, 14)); // NOI18N
        txtPatientUserNameSearch.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(0, 0, 0)));
        txtPatientUserNameSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPatientUserNameSearchActionPerformed(evt);
            }
        });
        jPatientDetailPanel.add(txtPatientUserNameSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 550, 149, 30));

        jUserNameSearchBtn.setBackground(new java.awt.Color(255, 255, 255));
        jUserNameSearchBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images_icons/icons8-search-30.png"))); // NOI18N
        jUserNameSearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jUserNameSearchBtnActionPerformed(evt);
            }
        });
        jPatientDetailPanel.add(jUserNameSearchBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 550, 40, 40));

        btnOldAppointmentDetails.setBackground(new java.awt.Color(255, 255, 255));
        btnOldAppointmentDetails.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        btnOldAppointmentDetails.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images_icons/icons8-more-30.png"))); // NOI18N
        btnOldAppointmentDetails.setText("More Details");
        btnOldAppointmentDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOldAppointmentDetailsActionPerformed(evt);
            }
        });
        jPatientDetailPanel.add(btnOldAppointmentDetails, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 810, 160, 37));

        btnBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images_icons/back.png"))); // NOI18N
        btnBack.setContentAreaFilled(false);
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        jPatientDetailPanel.add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(23, 23, 38, 37));

        btnNewAppointmentDetails2.setBackground(new java.awt.Color(255, 255, 255));
        btnNewAppointmentDetails2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnNewAppointmentDetails2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images_icons/view_past_appointment.png"))); // NOI18N
        btnNewAppointmentDetails2.setText("Appointment Details");
        btnNewAppointmentDetails2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewAppointmentDetails2ActionPerformed(evt);
            }
        });
        jPatientDetailPanel.add(btnNewAppointmentDetails2, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 480, 220, 37));

        tblUpcomingPatientAppointments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Appointment id", "Patient Name", "Doctor Name", "Appointment Date"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblUpcomingPatientAppointments);

        jPatientDetailPanel.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 320, 790, 150));

        btnViewRatings.setBackground(new java.awt.Color(255, 255, 255));
        btnViewRatings.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnViewRatings.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images_icons/review.png"))); // NOI18N
        btnViewRatings.setText("View my Ratings");
        btnViewRatings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewRatingsActionPerformed(evt);
            }
        });
        jPatientDetailPanel.add(btnViewRatings, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 210, 180, 37));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images_icons/polygonal-bg1100X850.jpg"))); // NOI18N
        jPatientDetailPanel.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1100, 860));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPatientDetailPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 1100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPatientDetailPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 860, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1100, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 860, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtPatientUserNameSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPatientUserNameSearchActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPatientUserNameSearchActionPerformed

    private void jUserNameSearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jUserNameSearchBtnActionPerformed
        // TODO add your handling code here:

        String patientUserName = txtPatientUserNameSearch.getText();
        if (patientUserName == null || patientUserName.isBlank()) {
            JOptionPane.showMessageDialog(null,"Please enter a valid username", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        populateCompletedAppointments(patientUserName);
    }//GEN-LAST:event_jUserNameSearchBtnActionPerformed

    private void btnOldAppointmentDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOldAppointmentDetailsActionPerformed
        // TODO add your handling code here:

        int selectedRow = tblCompletedPatientAppointments.getSelectedRow();
        if (selectedRow < 0) {
            log.error("Selected row from tblDoctorList is not >= 0");
            return;
        }

        long appointmentId = (long) tblCompletedPatientAppointments.getModel().getValueAt(selectedRow, 0);
        Appointment selectedAppointment = null;
        for (Appointment apt : doctor.getPatientAppointments()) {
            if (apt.getId() == appointmentId) {
                selectedAppointment = apt;
                break;
            }
        }

        if (selectedAppointment == null) {
            log.error("No patient appointment found for id " + appointmentId);
            return;
        } 

        nextScreen(WorkAreaPanel, new PatientAppointmentDetailsPanel(WorkAreaPanel, ecoSystem, hospital, selectedAppointment, this), "PatientAppointmentDetailsPanel");
    }//GEN-LAST:event_btnOldAppointmentDetailsActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        nextScreen(WorkAreaPanel, new Login(WorkAreaPanel, ecoSystem), "Login Page");
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnNewAppointmentDetails2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewAppointmentDetails2ActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblUpcomingPatientAppointments.getSelectedRow();
        if (selectedRow < 0) {
            log.error("Selected row from tblDoctorList is not >= 0");
            return;
        }

        long appointmentId = (long) tblUpcomingPatientAppointments.getModel().getValueAt(selectedRow, 0);
        Appointment selectedAppointment = null;
        for (Appointment apt : doctor.getPatientAppointments()) {
            if (apt.getId() == appointmentId) {
                selectedAppointment = apt;
                break;
            }
        }

        if (selectedAppointment == null) {
            log.error("No patient appointment found for id " + appointmentId);
            return;
        }

        nextScreen(WorkAreaPanel, new PatientAppointmentDetailsPanel(WorkAreaPanel, ecoSystem, hospital, selectedAppointment, this), "PatientAppointmentDetailsPanel");
    }//GEN-LAST:event_btnNewAppointmentDetails2ActionPerformed

    private void btnViewRatingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewRatingsActionPerformed
        // TODO add your handling code here:
        nextScreen(WorkAreaPanel, new ViewPersonRatingsJPanel(WorkAreaPanel, doctor, this), "ViewPersonRatingsJPanel");
    }//GEN-LAST:event_btnViewRatingsActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnNewAppointmentDetails2;
    private javax.swing.JButton btnOldAppointmentDetails;
    private javax.swing.JButton btnViewRatings;
    private javax.swing.JLabel imgLogo;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPatientDetailPanel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton jUserNameSearchBtn;
    private javax.swing.JLabel lblAddress;
    private javax.swing.JLabel lblAddressPlaceHolder;
    private javax.swing.JLabel lblDob1;
    private javax.swing.JLabel lblDobPlaceHolder;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblNamePlaceHolder;
    private javax.swing.JLabel lblPatientDetails;
    private javax.swing.JLabel lblPhoneNumber;
    private javax.swing.JLabel lblPhoneNumberPlaceHolder;
    private javax.swing.JLabel lblSearchByDate;
    private javax.swing.JTable tblCompletedPatientAppointments;
    private javax.swing.JTable tblUpcomingPatientAppointments;
    private javax.swing.JTextField txtPatientUserNameSearch;
    // End of variables declaration//GEN-END:variables

    private void populateUpcomingAppointments() {
            
        DefaultTableModel  model = (DefaultTableModel) tblUpcomingPatientAppointments.getModel();
        model.setRowCount(0);
        
        List<Appointment> upComingAppointments = doctor.getPatientAppointments();
        // Sort upComingAppointments based on date
        Collections.sort(upComingAppointments);
        
       // model.setRowCount(0);
        if ((upComingAppointments == null) || upComingAppointments.isEmpty()) {
          log.debug("No appointments found for doctor : " + doctor.getPersonDetails().getUserAccount().getUsername());
          return; 
       }
        for (Appointment appointment : upComingAppointments) {
            
            if (!appointment.getStatus().equals(Appointment.AppointmentStatus.PENDING)) {
                continue;
            }
            
            Object row[] = new Object[4];
            row[0] = appointment.getId();
            row[1] = appointment.getPatient().getPersonDetails().getFullName();
            row[2] = appointment.getDoctor().getPersonDetails().getFullName();
            row[3] = appointment.getDate() + " " + appointment.getAppointmentTimeHours() + ":00 hrs";
            model.addRow(row);
        }
        
    }

    private void populateDoctorInfoPlaceholders() {
        PersonDetails pd = doctor.getPersonDetails();
        lblAddressPlaceHolder.setText(pd.getAddress().toString()); 
        //lblAgePlaceHolder.setText(pd.getAge() + " years");  
         lblDobPlaceHolder.setText(pd.getDob().toString());
       
        lblNamePlaceHolder.setText(pd.getFullName()); 
        lblPhoneNumberPlaceHolder.setText(pd.getPhoneNumber());
        imgLogo.setIcon(pd.getLogoImage());
   
        if (pd.getLogoImage() != null) {
            imgLogo.setIcon(pd.getLogoImage());
            return;
        }
        
        ImageIcon imageIcon = new ImageIcon(getClass().getResource("/images_icons/doctor-icon.png"));
        Image image = imageIcon.getImage(); // transform it 
        Image newimg = image.getScaledInstance(120, 120,  java.awt.Image.SCALE_SMOOTH);
        imageIcon = new ImageIcon(newimg);  // transform it back]
        imgLogo.setIcon(imageIcon);
       
    }

    private void populateCompletedAppointments(String patientUserNameFilter) {
       DefaultTableModel  model = (DefaultTableModel) tblCompletedPatientAppointments.getModel();
        model.setRowCount(0);
        
        List<Appointment> upComingAppointments = doctor.getPatientAppointments();
        // Sort upComingAppointments based on date
        Collections.sort(upComingAppointments);
        
       // model.setRowCount(0);
        if ((upComingAppointments == null) || upComingAppointments.isEmpty()) {
          log.debug("No appointments found for doctor : " + doctor.getPersonDetails().getUserAccount().getUsername());
          return; 
       }
        for (Appointment appointment : upComingAppointments) {
            if (!appointment.getStatus().equals(Appointment.AppointmentStatus.COMPLETED)) {
                continue;
            }
            
            if (patientUserNameFilter != null && !appointment.getPatient().getUserAccount().getUsername().equals(patientUserNameFilter)) {
                continue;
            }
            
            Object row[] = new Object[5];
            row[0] = appointment.getId();
            row[1] = appointment.getPatient().getPersonDetails().getFullName();
            row[2] = appointment.getDoctor().getPersonDetails().getFullName();
            row[3] = appointment.getDate() + " " + appointment.getAppointmentTimeHours() + ":00 hrs";
            row[4] = appointment.getStatus().toString();
            model.addRow(row);
        }
    }
    void reload() {
        populateUpcomingAppointments();
        populateCompletedAppointments(null);
    }
    
   
}
