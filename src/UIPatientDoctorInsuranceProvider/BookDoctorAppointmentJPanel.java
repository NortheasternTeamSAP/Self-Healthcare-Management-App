/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UIPatientDoctorInsuranceProvider;

import DataStore.Appointment;
import Doctor.Doctor;
import EcoSystem.EcoSystem;
import Enterprise.Enterprise;
import Patient.Patient;
import Personnel.Person;
import Prescription.Prescription;
import Utils.ConsoleLogger;
import Utils.GraphPlotterUtils;
import Utils.NextScreen;
import Utils.AwsS3Helper;
import Utils.EmailClient;
import Utils.ViewPersonRatingsJPanel;
import VitalSign.VitalSigns;
import java.awt.Color;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.FileWriter;
import java.io.IOException;
import java.time.Instant;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author Ankur Bywar
 */
public class BookDoctorAppointmentJPanel extends javax.swing.JPanel implements NextScreen {
    JPanel WorkAreaPanel;
    Patient patient;
    JFrame mainJFrame;
    EcoSystem ecoSystem;
    
    ConsoleLogger log = ConsoleLogger.getLogger();
    
    Doctor selectedDoctor = null;
    LocalDate selectedAppointmentDate = null;
    int selectedAppointmentTime = -1;
    
    AwsS3Helper s3helper;
    /**
     * Creates new form BookFamilyDoctorAppointmentJPanel
     */
    public BookDoctorAppointmentJPanel(JPanel WorkAreaPanel, EcoSystem ecoSystem, Patient patient) {
        initComponents();
        this.setSize(1100,850);
        this.WorkAreaPanel = WorkAreaPanel;
        this.patient = patient;
        this.mainJFrame = mainJFrame;
        this.ecoSystem = ecoSystem;
        this.s3helper = new AwsS3Helper();
        
        tblDoctorList.setRowSelectionAllowed(true);
        tblDoctorList.setColumnSelectionAllowed(false);
        
        populateDoctorTable();
        
        enableAppointmentFields(false);
        enableAppointmentAvailabilityButtons(false);
        enableDoctorFields(false);
    }
    
    void populateDoctorTable() {
        DefaultTableModel  model = (DefaultTableModel) tblDoctorList.getModel();
        model.setRowCount(0);
        List<Person> doctors = this.ecoSystem.globalUserDirectory.getAllDoctors();
        if (doctors == null || doctors.isEmpty()) {
            log.error("No doctors exists for ecosystem");
            return;
        }

        for (Person p : doctors) {
            Doctor doc = (Doctor) p;
            Object row[] = new Object[3];
            row[0] = doc.getPersonDetails().getUserAccount().getUsername();
            row[1] = doc.getPersonDetails().getFullName();
            row[2] = doc.getSpeciality();
            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCalendarBeanInfo1 = new com.toedter.calendar.JCalendarBeanInfo();
        jCalendarBeanInfo2 = new com.toedter.calendar.JCalendarBeanInfo();
        jDateChooserCellEditor1 = new com.toedter.calendar.JDateChooserCellEditor();
        jBookAppointment = new javax.swing.JPanel();
        lblDoctorTxt = new javax.swing.JLabel();
        lblDoctorName = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        lblAppointmentBook = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDoctorList = new javax.swing.JTable();
        lblDoctorNameValue = new javax.swing.JLabel();
        lblDoctorSpeciality = new javax.swing.JLabel();
        lblDoctorSpecialityValue = new javax.swing.JLabel();
        lblDoctorReviews = new javax.swing.JLabel();
        btnDoctorReviews = new javax.swing.JButton();
        jDateChooserDoctorAvailability = new com.toedter.calendar.JDateChooser();
        btn10am = new javax.swing.JButton();
        btn11am = new javax.swing.JButton();
        btn2pm = new javax.swing.JButton();
        btn9am = new javax.swing.JButton();
        btn3pm = new javax.swing.JButton();
        btn1pm = new javax.swing.JButton();
        btnConfirmDoctorAppointment = new javax.swing.JButton();
        jCheckBoxShareCurrentPrescriptionWithDoctor = new javax.swing.JCheckBox();
        jCheckBoxShareInsuranceDetailsWithDoctor = new javax.swing.JCheckBox();
        jCheckBoxSendAppointmentEmailConfirmation = new javax.swing.JCheckBox();
        jCheckBoxSendAppointmentTextConfirmation = new javax.swing.JCheckBox();
        jTextFieldAppointmentDetails = new javax.swing.JTextField();
        lblOtherAppointmentDetails = new javax.swing.JLabel();
        jCheckBoxShareVitalsWithDoctor = new javax.swing.JCheckBox();
        lblDoctorAddress = new javax.swing.JLabel();
        lblDoctorAddressValue = new javax.swing.JLabel();
        lblCheckAvailability = new javax.swing.JLabel();
        lblDoctorGender = new javax.swing.JLabel();
        lblDoctorGenderValue = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        jBookAppointment.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblDoctorTxt.setText("Select Doctor to check the availability");
        jBookAppointment.add(lblDoctorTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(99, 75, -1, -1));

        lblDoctorName.setBackground(new java.awt.Color(255, 102, 0));
        lblDoctorName.setText("Doctor Name:");
        jBookAppointment.add(lblDoctorName, new org.netbeans.lib.awtextra.AbsoluteConstraints(111, 246, -1, -1));

        btnBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images_icons/back.png"))); // NOI18N
        btnBack.setContentAreaFilled(false);
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        jBookAppointment.add(btnBack, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 21, 87, -1));

        lblAppointmentBook.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblAppointmentBook.setText("Patient new appointment booking with Primary Care");
        jBookAppointment.add(lblAppointmentBook, new org.netbeans.lib.awtextra.AbsoluteConstraints(99, 28, 690, 35));

        tblDoctorList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"doc1", "AAA", "AAA"},
                {"doc2", "BBB", "BBB"},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Id", "Doctors Name", "Specialization"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDoctorList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDoctorListMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tblDoctorListMouseExited(evt);
            }
        });
        jScrollPane1.setViewportView(tblDoctorList);
        if (tblDoctorList.getColumnModel().getColumnCount() > 0) {
            tblDoctorList.getColumnModel().getColumn(0).setResizable(false);
            tblDoctorList.getColumnModel().getColumn(1).setResizable(false);
            tblDoctorList.getColumnModel().getColumn(2).setResizable(false);
        }

        jBookAppointment.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(99, 103, 618, 131));

        lblDoctorNameValue.setText("Not Available");
        jBookAppointment.add(lblDoctorNameValue, new org.netbeans.lib.awtextra.AbsoluteConstraints(205, 246, -1, -1));

        lblDoctorSpeciality.setText("Speciality:");
        jBookAppointment.add(lblDoctorSpeciality, new org.netbeans.lib.awtextra.AbsoluteConstraints(111, 268, -1, -1));

        lblDoctorSpecialityValue.setText("Not Available");
        jBookAppointment.add(lblDoctorSpecialityValue, new org.netbeans.lib.awtextra.AbsoluteConstraints(205, 268, -1, -1));

        lblDoctorReviews.setText("Reviews:");
        jBookAppointment.add(lblDoctorReviews, new org.netbeans.lib.awtextra.AbsoluteConstraints(111, 356, -1, -1));

        btnDoctorReviews.setBackground(new java.awt.Color(255, 255, 255));
        btnDoctorReviews.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnDoctorReviews.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images_icons/review.png"))); // NOI18N
        btnDoctorReviews.setText("See detailed reviews");
        btnDoctorReviews.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnDoctorReviews.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDoctorReviewsActionPerformed(evt);
            }
        });
        jBookAppointment.add(btnDoctorReviews, new org.netbeans.lib.awtextra.AbsoluteConstraints(173, 342, -1, -1));
        jBookAppointment.add(jDateChooserDoctorAvailability, new org.netbeans.lib.awtextra.AbsoluteConstraints(587, 246, 184, -1));

        btn10am.setBackground(new java.awt.Color(255, 255, 255));
        btn10am.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        btn10am.setText("10 am");
        btn10am.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn10amActionPerformed(evt);
            }
        });
        jBookAppointment.add(btn10am, new org.netbeans.lib.awtextra.AbsoluteConstraints(549, 293, -1, -1));

        btn11am.setBackground(new java.awt.Color(255, 255, 255));
        btn11am.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        btn11am.setText("11 am");
        btn11am.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn11amActionPerformed(evt);
            }
        });
        jBookAppointment.add(btn11am, new org.netbeans.lib.awtextra.AbsoluteConstraints(635, 293, -1, -1));

        btn2pm.setBackground(new java.awt.Color(255, 255, 255));
        btn2pm.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        btn2pm.setText("2 pm");
        btn2pm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn2pmActionPerformed(evt);
            }
        });
        jBookAppointment.add(btn2pm, new org.netbeans.lib.awtextra.AbsoluteConstraints(808, 293, 64, -1));

        btn9am.setBackground(new java.awt.Color(255, 255, 255));
        btn9am.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        btn9am.setText("9 am");
        btn9am.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn9amActionPerformed(evt);
            }
        });
        jBookAppointment.add(btn9am, new org.netbeans.lib.awtextra.AbsoluteConstraints(465, 293, 72, -1));

        btn3pm.setBackground(new java.awt.Color(255, 255, 255));
        btn3pm.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        btn3pm.setText("3 pm");
        btn3pm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn3pmActionPerformed(evt);
            }
        });
        jBookAppointment.add(btn3pm, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 293, 73, -1));

        btn1pm.setBackground(new java.awt.Color(255, 255, 255));
        btn1pm.setFont(new java.awt.Font("sansserif", 1, 14)); // NOI18N
        btn1pm.setText("1 pm");
        btn1pm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn1pmActionPerformed(evt);
            }
        });
        jBookAppointment.add(btn1pm, new org.netbeans.lib.awtextra.AbsoluteConstraints(725, 293, 68, -1));

        btnConfirmDoctorAppointment.setBackground(new java.awt.Color(255, 255, 255));
        btnConfirmDoctorAppointment.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        btnConfirmDoctorAppointment.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images_icons/accept.png"))); // NOI18N
        btnConfirmDoctorAppointment.setText("Confirm Appointment with Primary Care");
        btnConfirmDoctorAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmDoctorAppointmentActionPerformed(evt);
            }
        });
        jBookAppointment.add(btnConfirmDoctorAppointment, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 721, 377, -1));

        jCheckBoxShareCurrentPrescriptionWithDoctor.setText("Attach Current Prescription Report in email to send to primary care");
        jCheckBoxShareCurrentPrescriptionWithDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxShareCurrentPrescriptionWithDoctorActionPerformed(evt);
            }
        });
        jBookAppointment.add(jCheckBoxShareCurrentPrescriptionWithDoctor, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 460, -1, -1));

        jCheckBoxShareInsuranceDetailsWithDoctor.setText("Attach insurance details in the email to be sent to primary care");
        jCheckBoxShareInsuranceDetailsWithDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxShareInsuranceDetailsWithDoctorActionPerformed(evt);
            }
        });
        jBookAppointment.add(jCheckBoxShareInsuranceDetailsWithDoctor, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 600, -1, -1));

        jCheckBoxSendAppointmentEmailConfirmation.setText("Send appointment confirmation email");
        jCheckBoxSendAppointmentEmailConfirmation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxSendAppointmentEmailConfirmationActionPerformed(evt);
            }
        });
        jBookAppointment.add(jCheckBoxSendAppointmentEmailConfirmation, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 640, -1, -1));

        jCheckBoxSendAppointmentTextConfirmation.setText("Send appointment confirmation text");
        jCheckBoxSendAppointmentTextConfirmation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxSendAppointmentTextConfirmationActionPerformed(evt);
            }
        });
        jBookAppointment.add(jCheckBoxSendAppointmentTextConfirmation, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 680, -1, -1));

        jTextFieldAppointmentDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldAppointmentDetailsActionPerformed(evt);
            }
        });
        jBookAppointment.add(jTextFieldAppointmentDetails, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 490, 332, 87));

        lblOtherAppointmentDetails.setText("Other Complaints:");
        jBookAppointment.add(lblOtherAppointmentDetails, new org.netbeans.lib.awtextra.AbsoluteConstraints(111, 521, -1, -1));

        jCheckBoxShareVitalsWithDoctor.setText("Attach vitals report in email to send to primary care");
        jCheckBoxShareVitalsWithDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxShareVitalsWithDoctorActionPerformed(evt);
            }
        });
        jBookAppointment.add(jCheckBoxShareVitalsWithDoctor, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 420, -1, -1));

        lblDoctorAddress.setText("Address:");
        jBookAppointment.add(lblDoctorAddress, new org.netbeans.lib.awtextra.AbsoluteConstraints(111, 290, -1, -1));

        lblDoctorAddressValue.setText("Not Available");
        jBookAppointment.add(lblDoctorAddressValue, new org.netbeans.lib.awtextra.AbsoluteConstraints(205, 290, -1, -1));

        lblCheckAvailability.setText("Check Availability");
        jBookAppointment.add(lblCheckAvailability, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 250, -1, -1));

        lblDoctorGender.setText("Gender:");
        jBookAppointment.add(lblDoctorGender, new org.netbeans.lib.awtextra.AbsoluteConstraints(111, 314, -1, -1));

        lblDoctorGenderValue.setText("Not Available");
        jBookAppointment.add(lblDoctorGenderValue, new org.netbeans.lib.awtextra.AbsoluteConstraints(205, 314, -1, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images_icons/polygonal-bg1100X850.jpg"))); // NOI18N
        jBookAppointment.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(-6, -7, 1100, 860));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jBookAppointment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jBookAppointment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBoxShareVitalsWithDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxShareVitalsWithDoctorActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_jCheckBoxShareVitalsWithDoctorActionPerformed

    private void jTextFieldAppointmentDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldAppointmentDetailsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldAppointmentDetailsActionPerformed

    private void jCheckBoxSendAppointmentTextConfirmationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxSendAppointmentTextConfirmationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxSendAppointmentTextConfirmationActionPerformed

    private void jCheckBoxSendAppointmentEmailConfirmationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxSendAppointmentEmailConfirmationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxSendAppointmentEmailConfirmationActionPerformed

    private void jCheckBoxShareInsuranceDetailsWithDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxShareInsuranceDetailsWithDoctorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxShareInsuranceDetailsWithDoctorActionPerformed

    private void btnConfirmDoctorAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmDoctorAppointmentActionPerformed
        // TODO add your handling code here:
        
        String otherAppointmentDetails = jTextFieldAppointmentDetails.getText();
        
        log.error("** Appointment booked for patient " + patient.getPersonDetails().getFullName() + 
                " with doctor " + selectedDoctor.getPersonDetails().getFullName() + " on date " + 
                selectedAppointmentDate + " and time " + selectedAppointmentTime + ":00 hrs**");
        
        
        Appointment apt = new Appointment(patient, otherAppointmentDetails, selectedDoctor, selectedAppointmentDate, selectedAppointmentTime);
        selectedDoctor.addPatientAppointment(apt);
        patient.addDoctorAppointment(apt);
        btnConfirmDoctorAppointment.setEnabled(false);
        
        
        // Attach previous vitals report
        // Attach current prescription
        // Attach previous lab reports
        // Attach insurance details'

        if (jCheckBoxShareVitalsWithDoctor.isSelected()) {
            log.debug("Selected jCheckBoxAttachVitalsToEmail");
            uploadVitalsHistoryToS3(apt);
        }
        
        if (jCheckBoxShareCurrentPrescriptionWithDoctor.isSelected()) {
            log.debug("Selected jCheckBoxAttachPrescriptionToEmail");
            uploadCurrentPrescriptionToS3(apt);
        }
        
        if (jCheckBoxShareInsuranceDetailsWithDoctor.isSelected()) {
            log.debug("Selected jCheckBoxAttachInsuranceDetailsToEmails");
            uploadInsuranceDetailsToS3(apt);
        }
        
        if (jCheckBoxSendAppointmentEmailConfirmation.isSelected()) {
            sendAppointmentConfirmationEmail(apt);
        }
        
        if (jCheckBoxSendAppointmentTextConfirmation.isSelected()) {
            sendAppointmentConfirmationText(apt);
        }
        
        JOptionPane.showMessageDialog(null, "Appointment booked with primary care and the patient has been notified!");
    }//GEN-LAST:event_btnConfirmDoctorAppointmentActionPerformed

    void sendAppointmentConfirmationText(Appointment appointment) {
        String message = getAppointmentConfirmationMessage(appointment);
        Person patient = appointment.getPatient();
        Person doctor = appointment.getDoctor();
        ecoSystem.getSMSHelper().sendSMSAsynchronous(patient.getPersonDetails().getPhoneNumber(), message);
    }
    
    void sendAppointmentConfirmationEmail(Appointment appointment) {
        String message = getAppointmentConfirmationMessage(appointment);
        Person patient = appointment.getPatient();
        Person doctor = appointment.getDoctor();
        boolean success = new EmailClient().sendEmail(
               patient.getPersonDetails().getEmailId(), 
               ecoSystem.getSysAdminEmail(), 
               ecoSystem.getSysAdmingEmailPassword(), 
               "Appointment booked with primary care on " + appointment.getDate() + " " + appointment.getAppointmentTimeHours() + ":00 hrs", 
               message);
    }
    
    private String getAppointmentConfirmationMessage(Appointment appointment) {
        Person patient = appointment.getPatient();
        Person doctor = appointment.getDoctor();
        Enterprise enterprise = ecoSystem.organizationDirectory.getOrganization(doctor.getOrganizationId()).getEnterprise();
        return "Hi " + patient.getPersonDetails().getFullName() + "!\n" +
                "Your appointment with Doctor " + doctor.getPersonDetails().getFullName() + " at " + enterprise.getEnterpriseName() + " primary care unit " + 
                "has been booked for date " + appointment.getDate() + " " + appointment.getAppointmentTimeHours() + ":00 hrs.\n" +
                "\n\n\n" +
                "Cheers -\n" +
                "Health Springs App Team";
    }
    
    private void uploadVitalsHistoryToS3(Appointment appointment) {
        String patientUsername = appointment.getPatient().getUserAccount().getUsername();
        String vitalsHistoryImageName = "vitals-image-" + patientUsername + "-" + appointment.getId() + "-" + appointment.getDate();
        String localVitalsImagePath = "/tmp/patient/" + vitalsHistoryImageName; 
        
        // Create vital sign history graph image and write it to localVitalsImagePath path on local disk
        List<VitalSigns> vitalSignsHistory = patient.getVitalSignsHistory();
        GraphPlotterUtils graphPlotterUtils = new GraphPlotterUtils();
        DefaultCategoryDataset dataset = 
                new PatientVitalSignHistoryHelper().createPatientVitalsSignsDefaultCategoryDataSet(graphPlotterUtils, vitalSignsHistory);
        boolean success = graphPlotterUtils.writeGraphAsImageToDisk("Date for vitals", "Ranges", "All vital Signs trend", "Vital sign", dataset, localVitalsImagePath);
        if (success) {
            log.debug("Successfully create vitals history report image on disk");
        } else {
            log.debug("Unable to create vitals history report image on disk. Not uploading to S3");
            return;
        }
         
        // Upload the image to S3
        String key = "/patient/" + patientUsername + "/vital-signs-history/" + vitalsHistoryImageName + ".png";
        success = s3helper.putObject(key, localVitalsImagePath);
        if (success) {
            log.debug("Successfully written vital sign history image to S3 bucket");
        } else {
            log.debug("Unable to write vitals history report image to S3 bucket");
            return;
        }
        
        // After the image is successfully uploaded to S3, update appointment object with the S3 image path (key).
        // We will need S3 image path to download the image file while doctor is looking at the appointment.
        appointment.setPatientVitalSignsHistoryS3ObjectPath(key);
        log.debug("Updated appointment with S3 path for vital sign history file");
    }
    
    private void uploadCurrentPrescriptionToS3(Appointment appointment) {
        Patient patient = (Patient) appointment.getPatient();
        List<Prescription> prescriptionList = new ArrayList<>(patient.getPrescriptionsList());
        if (prescriptionList == null || prescriptionList.isEmpty()) {
            appointment.setPatientPrescriptionsFileS3ObjectPath(null);
            return;
        }
        
        Collections.sort(prescriptionList, new Comparator<Prescription>() {
            @Override
            public int compare(Prescription o1, Prescription o2) {
                return o2.getPrescriptionDate().compareTo(o1.getPrescriptionDate());
            }
        });
       
        String patientUsername = appointment.getPatient().getUserAccount().getUsername();
        String prescriptionHistoryFileName = "prescriptions-history-" + patientUsername + "-" + appointment.getId() + "-" + appointment.getDate();
        String prescriptionHistoryFileNamePath = "/tmp/patient/" + prescriptionHistoryFileName; 
        
        FileWriter myWriter = null;
        try {
            myWriter = new FileWriter(prescriptionHistoryFileNamePath);
            for (Prescription prescription : prescriptionList) {
                myWriter.write(prescription.getFormattedString());
            }
            myWriter.close();
        } catch (IOException e) {
            log.error("Unable to create prescriptions history file. Exception - " + e.getMessage());
            appointment.setPatientPrescriptionsFileS3ObjectPath(null);
            return;
        } 
        
        String key = "/patient/" + patientUsername + "/prescriptions-history/" + prescriptionHistoryFileName + ".txt";
        boolean success = s3helper.putObject(key, prescriptionHistoryFileNamePath);
        if (success) {
            log.debug("Successfully written prescription history to S3 bucket");
        } else {
            log.debug("Unable to write prescription history to S3 bucket");
            appointment.setPatientPrescriptionsFileS3ObjectPath(null);
            return;
        }
        
        appointment.setPatientPrescriptionsFileS3ObjectPath(key);
        log.debug("Updated appointment with S3 path for prescription history file");
    }
    
    private void uploadInsuranceDetailsToS3(Appointment appointment) {
        String patientUsername = appointment.getPatient().getUserAccount().getUsername();
        String insuranceFileName = "insurance-detail-file-" + patientUsername;
        String localInsuranceFilePath = "/tmp/patient/" + insuranceFileName; 
        
        if (patient.getInsuranceDetails() == null) {
            appointment.setPatientInsuranceFileS3ObjectPath(null);
            return;
        }
        
        if (patient.getInsuranceDetails().generateFileForInsuranceDetails(localInsuranceFilePath) == false) {
            log.error("Unable to generate insurance details file to upload to S3");
        }
        
        String key = "/patient/" + patientUsername + "/insurance-details/" + localInsuranceFilePath + ".txt";
        if (s3helper.putObject(key, localInsuranceFilePath)) {
            log.debug("Successfully written insurance file to S3 bucket");
        } else {
            log.debug("Unable to write insurance file to S3 bucket");
            return;
        }
        
        appointment.setPatientInsuranceFileS3ObjectPath(key);
        log.debug("Updated appointment with S3 path for insurance file");
    }
    
    private void btn1pmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn1pmActionPerformed
        // TODO add your handling code here:
        selectedAppointmentTime = 13;
        btn9am.setBackground(Color.GRAY);
        btn10am.setBackground(Color.GRAY);      
        btn11am.setBackground(Color.GRAY);
        btn1pm.setBackground(Color.YELLOW);
        btn2pm.setBackground(Color.GRAY);
        btn3pm.setBackground(Color.GRAY);
        
        enableAppointmentFields(true);
        
    }//GEN-LAST:event_btn1pmActionPerformed

    private void btn3pmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn3pmActionPerformed
        // TODO add your handling code here:
        selectedAppointmentTime = 15;
        btn9am.setBackground(Color.GRAY);
        btn10am.setBackground(Color.GRAY);      
        btn11am.setBackground(Color.GRAY);
        btn1pm.setBackground(Color.GRAY);
        btn2pm.setBackground(Color.GRAY);
        btn3pm.setBackground(Color.YELLOW);
        
        enableAppointmentFields(true);
    }//GEN-LAST:event_btn3pmActionPerformed

    private void btn9amActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn9amActionPerformed
        // TODO add your handling code here:
        selectedAppointmentTime = 9;
        btn9am.setBackground(Color.YELLOW);
        btn10am.setBackground(Color.GRAY);      
        btn11am.setBackground(Color.GRAY);
        btn1pm.setBackground(Color.GRAY);
        btn2pm.setBackground(Color.GRAY);
        btn3pm.setBackground(Color.GRAY);
        
        enableAppointmentFields(true);
        
    }//GEN-LAST:event_btn9amActionPerformed

    private void btn2pmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn2pmActionPerformed
        // TODO add your handling code here:
        selectedAppointmentTime = 14;
        btn9am.setBackground(Color.GRAY);
        btn10am.setBackground(Color.GRAY);      
        btn11am.setBackground(Color.GRAY);
        btn1pm.setBackground(Color.GRAY);
        btn2pm.setBackground(Color.YELLOW);
        btn3pm.setBackground(Color.GRAY);
        
        enableAppointmentFields(true);
    }//GEN-LAST:event_btn2pmActionPerformed

    private void btn11amActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn11amActionPerformed
        // TODO add your handling code here:
        selectedAppointmentTime = 11;
        btn9am.setBackground(Color.GRAY);
        btn10am.setBackground(Color.GRAY);      
        btn11am.setBackground(Color.YELLOW);
        btn1pm.setBackground(Color.GRAY);
        btn2pm.setBackground(Color.GRAY);
        btn3pm.setBackground(Color.GRAY);
        
        enableAppointmentFields(true);
    }//GEN-LAST:event_btn11amActionPerformed

    private void btn10amActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn10amActionPerformed
        // TODO add your handling code here:
        selectedAppointmentTime = 10;
        btn9am.setBackground(Color.GRAY);
        btn10am.setBackground(Color.YELLOW);      
        btn11am.setBackground(Color.GRAY);
        btn1pm.setBackground(Color.GRAY);
        btn2pm.setBackground(Color.GRAY);
        btn3pm.setBackground(Color.GRAY);
        
        enableAppointmentFields(true);
    }//GEN-LAST:event_btn10amActionPerformed

    private void btnDoctorReviewsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDoctorReviewsActionPerformed
        // TODO add your handling code here:
        nextScreen(WorkAreaPanel, new ViewPersonRatingsJPanel(WorkAreaPanel, selectedDoctor, this), "ViewPersonRatingsJPanel");
    }//GEN-LAST:event_btnDoctorReviewsActionPerformed

    private void tblDoctorListMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDoctorListMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_tblDoctorListMouseExited

    private void tblDoctorListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDoctorListMouseClicked
        // TODO add your handling code here:
        
        enableAppointmentFields(false);
        enableAppointmentAvailabilityButtons(false);
        enableDoctorFields(false);
        
        
        int selectedRow = tblDoctorList.getSelectedRow();
        if (selectedRow < 0) {
            log.error("Selected row from tblDoctorList is not >= 0");
            return;
        }
        
        String doctorUsername = (String) tblDoctorList.getModel().getValueAt(selectedRow, 0);
        selectedDoctor = (Doctor) ecoSystem.globalUserDirectory.get(doctorUsername);
        if (selectedDoctor == null) {
            log.error("No doctor exists for username: " + doctorUsername);
            return;
        }
        
        lblDoctorNameValue.setText(selectedDoctor.getPersonDetails().getFullName());
        lblDoctorSpecialityValue.setText(selectedDoctor.getSpeciality());
        lblDoctorAddressValue.setText(selectedDoctor.getPersonDetails().getAddress().toString());
        lblDoctorGenderValue.setText(selectedDoctor.getPersonDetails().getGender().toString());
        setupDoctorAppointmentCalander();
        enableDoctorFields(true);

    }//GEN-LAST:event_tblDoctorListMouseClicked

    private void enableAppointmentFields(boolean isEnabled) {
        jCheckBoxShareInsuranceDetailsWithDoctor.setEnabled(isEnabled);
        jCheckBoxShareCurrentPrescriptionWithDoctor.setEnabled(isEnabled);
        jCheckBoxShareVitalsWithDoctor.setEnabled(isEnabled);
        jCheckBoxSendAppointmentEmailConfirmation.setEnabled(isEnabled);
        jCheckBoxSendAppointmentTextConfirmation.setEnabled(isEnabled);
        lblOtherAppointmentDetails.setEnabled(isEnabled);
        jTextFieldAppointmentDetails.setEnabled(isEnabled);
        btnConfirmDoctorAppointment.setEnabled(isEnabled);
    }
    
    private void enableAppointmentAvailabilityButtons(boolean isEnabled) {
        btn9am.setEnabled(isEnabled);
        btn10am.setEnabled(isEnabled);      
        btn11am.setEnabled(isEnabled);
        btn1pm.setEnabled(isEnabled);
        btn2pm.setEnabled(isEnabled);
        btn3pm.setEnabled(isEnabled);
    }
    
    private void enableDoctorFields(boolean isEnabled) {
        lblDoctorName.setEnabled(isEnabled);
        lblDoctorNameValue.setEnabled(isEnabled);
        lblDoctorSpeciality.setEnabled(isEnabled);
        lblDoctorSpecialityValue.setEnabled(isEnabled);
        lblDoctorAddress.setEnabled(isEnabled);
        lblDoctorAddressValue.setEnabled(isEnabled);
        lblDoctorGender.setEnabled(isEnabled);
        lblDoctorGenderValue.setEnabled(isEnabled);
        lblDoctorReviews.setEnabled(isEnabled);
        btnDoctorReviews.setEnabled(isEnabled);
        lblCheckAvailability.setEnabled(isEnabled);
        lblCheckAvailability.setEnabled(isEnabled);
        jDateChooserDoctorAvailability.setEnabled(isEnabled);
    }
    
    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        nextScreen(WorkAreaPanel, new PatientHomePagePanel(WorkAreaPanel, ecoSystem, patient), "PatientHomePagePanel");
    }//GEN-LAST:event_btnBackActionPerformed

    private void jCheckBoxShareCurrentPrescriptionWithDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxShareCurrentPrescriptionWithDoctorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxShareCurrentPrescriptionWithDoctorActionPerformed

    private void setupDoctorAppointmentCalander() {
        jDateChooserDoctorAvailability.setMinSelectableDate(Date.from(Instant.now()));
        jDateChooserDoctorAvailability.setMaxSelectableDate(Date.from(Instant.now().plusMillis(1728000000))); // 20 days
        
        jDateChooserDoctorAvailability.addPropertyChangeListener(new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                
                Object newValue = evt.getNewValue();
                if (newValue instanceof Date) {
                    log.debug("Selected appointment date = " + (Date) newValue);
                    selectedAppointmentDate = LocalDate.ofInstant(((Date) newValue).toInstant(), ZoneId.systemDefault()); ;
                    updateDoctorAvailabilityButtons((Date) newValue);
                    btnConfirmDoctorAppointment.setEnabled(true);
                }
            }
        });
    }
    
    private void updateDoctorAvailabilityButtons(Date selectedAppointmentDate) {
        btn9am.setEnabled(false);
        btn10am.setEnabled(false);      
        btn11am.setEnabled(false);
        btn1pm.setEnabled(false);
        btn2pm.setEnabled(false);
        btn3pm.setEnabled(false);
        
        
        LocalDate localDate = selectedAppointmentDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        if (selectedDoctor.isDoctorAvailable(localDate, 9)) {
            btn9am.setEnabled(true);
        }
        
        if (selectedDoctor.isDoctorAvailable(localDate, 10)) {
            btn10am.setEnabled(true);
        }
        
        if (selectedDoctor.isDoctorAvailable(localDate, 11)) {
            btn11am.setEnabled(true);
        }
        
        if (selectedDoctor.isDoctorAvailable(localDate, 13)) {
            btn1pm.setEnabled(true);
        }
        
        if (selectedDoctor.isDoctorAvailable(localDate, 14)) {
            btn2pm.setEnabled(true);
        }
        
        if (selectedDoctor.isDoctorAvailable(localDate, 15)) {
            btn3pm.setEnabled(true);
        }
    }

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn10am;
    private javax.swing.JButton btn11am;
    private javax.swing.JButton btn1pm;
    private javax.swing.JButton btn2pm;
    private javax.swing.JButton btn3pm;
    private javax.swing.JButton btn9am;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnConfirmDoctorAppointment;
    private javax.swing.JButton btnDoctorReviews;
    private javax.swing.JPanel jBookAppointment;
    private com.toedter.calendar.JCalendarBeanInfo jCalendarBeanInfo1;
    private com.toedter.calendar.JCalendarBeanInfo jCalendarBeanInfo2;
    private javax.swing.JCheckBox jCheckBoxSendAppointmentEmailConfirmation;
    private javax.swing.JCheckBox jCheckBoxSendAppointmentTextConfirmation;
    private javax.swing.JCheckBox jCheckBoxShareCurrentPrescriptionWithDoctor;
    private javax.swing.JCheckBox jCheckBoxShareInsuranceDetailsWithDoctor;
    private javax.swing.JCheckBox jCheckBoxShareVitalsWithDoctor;
    private com.toedter.calendar.JDateChooserCellEditor jDateChooserCellEditor1;
    private com.toedter.calendar.JDateChooser jDateChooserDoctorAvailability;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextFieldAppointmentDetails;
    private javax.swing.JLabel lblAppointmentBook;
    private javax.swing.JLabel lblCheckAvailability;
    private javax.swing.JLabel lblDoctorAddress;
    private javax.swing.JLabel lblDoctorAddressValue;
    private javax.swing.JLabel lblDoctorGender;
    private javax.swing.JLabel lblDoctorGenderValue;
    private javax.swing.JLabel lblDoctorName;
    private javax.swing.JLabel lblDoctorNameValue;
    private javax.swing.JLabel lblDoctorReviews;
    private javax.swing.JLabel lblDoctorSpeciality;
    private javax.swing.JLabel lblDoctorSpecialityValue;
    private javax.swing.JLabel lblDoctorTxt;
    private javax.swing.JLabel lblOtherAppointmentDetails;
    private javax.swing.JTable tblDoctorList;
    // End of variables declaration//GEN-END:variables
}

