/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package PatientCoreWorkFlowUI;

import DataStore.Appointment;
import Doctor.Doctor;
import EcoSystem.EcoSystem;
import Patient.Patient;
import Personnel.Person;
import Utils.ConsoleLogger;
import Utils.NextScreen;
import java.awt.Color;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.time.Instant;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.Date;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Ankur Bywar
 */
public class BookDoctorAppointmentJPanel extends javax.swing.JPanel implements NextScreen {
    JPanel WorkAreaPanel;
    Patient patient;
    JFrame mainJFrame;
    EcoSystem ecoSystem;
    
    ConsoleLogger log = ConsoleLogger.getLogger();
    
    Doctor selectedDoctor = null;
    LocalDate selectedAppointmentDate = null;
    int selectedAppointmentTime = -1;
    
    /**
     * Creates new form BookFamilyDoctorAppointmentJPanel
     */
    public BookDoctorAppointmentJPanel(JPanel WorkAreaPanel, EcoSystem ecoSystem, Patient patient) {
        initComponents();
        this.WorkAreaPanel = WorkAreaPanel;
        this.patient = patient;
        this.mainJFrame = mainJFrame;
        this.ecoSystem = ecoSystem;
        
        tblDoctorList.setRowSelectionAllowed(true);
        tblDoctorList.setColumnSelectionAllowed(false);
        
        populateDoctorTable();
        
        enableAppointmentFields(false);
        enableAppointmentAvailabilityButtons(false);
        enableDoctorFields(false);
    }
    
    void populateDoctorTable() {
        DefaultTableModel  model = (DefaultTableModel) tblDoctorList.getModel();
        model.setRowCount(0);
        List<Person> doctors = this.ecoSystem.globalUserDirectory.getAllDoctors();
        if (doctors == null || doctors.isEmpty()) {
            log.error("No doctors exists for ecosystem");
            return;
        }

        for (Person p : doctors) {
            Doctor doc = (Doctor) p;
            Object row[] = new Object[3];
            row[0] = doc.getPersonDetails().getUserAccount().getUsername();
            row[1] = doc.getPersonDetails().getFullName();
            row[2] = doc.getSpeciality();
            model.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCalendarBeanInfo1 = new com.toedter.calendar.JCalendarBeanInfo();
        jCalendarBeanInfo2 = new com.toedter.calendar.JCalendarBeanInfo();
        jDateChooserCellEditor1 = new com.toedter.calendar.JDateChooserCellEditor();
        jBookAppointment = new javax.swing.JPanel();
        lblDoctorTxt = new javax.swing.JLabel();
        lblDoctorName = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        lblAppointmentBook = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDoctorList = new javax.swing.JTable();
        lblDoctorNameValue = new javax.swing.JLabel();
        lblDoctorSpeciality = new javax.swing.JLabel();
        lblDoctorSpecialityValue = new javax.swing.JLabel();
        lblDoctorReviews = new javax.swing.JLabel();
        btnDoctorReviews = new javax.swing.JButton();
        jDateChooserDoctorAvailability = new com.toedter.calendar.JDateChooser();
        btn10am = new javax.swing.JButton();
        btn11am = new javax.swing.JButton();
        btn2pm = new javax.swing.JButton();
        btn9am = new javax.swing.JButton();
        btn3pm = new javax.swing.JButton();
        btn1pm = new javax.swing.JButton();
        btnConfirmDoctorAppointment = new javax.swing.JButton();
        jCheckBoxAttachPrescriptionToEmail = new javax.swing.JCheckBox();
        jCheckBoxAttachInsuranceDetailsToEmail = new javax.swing.JCheckBox();
        jCheckBoxSendAppointmentEmailConfirmation = new javax.swing.JCheckBox();
        jCheckBoxSendAppointmentTextConfirmation = new javax.swing.JCheckBox();
        jCheckBoxSendAppointmentRemiender = new javax.swing.JCheckBox();
        jTextFieldAppointmentDetails = new javax.swing.JTextField();
        lblOtherAppointmentDetails = new javax.swing.JLabel();
        jCheckBoxAttachVitalsToEmail = new javax.swing.JCheckBox();
        lblDoctorAddress = new javax.swing.JLabel();
        lblDoctorAddressValue = new javax.swing.JLabel();
        lblCheckAvailability = new javax.swing.JLabel();
        lblDoctorGender = new javax.swing.JLabel();
        lblDoctorGenderValue = new javax.swing.JLabel();
        jCheckBoxAttachPreviousLabReports = new javax.swing.JCheckBox();

        lblDoctorTxt.setText("Select Doctor to check the availability");

        lblDoctorName.setBackground(new java.awt.Color(255, 102, 0));
        lblDoctorName.setText("Doctor Name:");

        btnBack.setText("<<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblAppointmentBook.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        lblAppointmentBook.setText("Patient new appointment booking");

        tblDoctorList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"doc1", "AAA", "AAA"},
                {"doc2", "BBB", "BBB"},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Id", "Doctors Name", "Specialization"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblDoctorList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblDoctorListMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                tblDoctorListMouseExited(evt);
            }
        });
        jScrollPane1.setViewportView(tblDoctorList);
        if (tblDoctorList.getColumnModel().getColumnCount() > 0) {
            tblDoctorList.getColumnModel().getColumn(0).setResizable(false);
            tblDoctorList.getColumnModel().getColumn(1).setResizable(false);
            tblDoctorList.getColumnModel().getColumn(2).setResizable(false);
        }

        lblDoctorNameValue.setText("Not Available");

        lblDoctorSpeciality.setText("Speciality:");

        lblDoctorSpecialityValue.setText("Not Available");

        lblDoctorReviews.setText("Reviews:");

        btnDoctorReviews.setBackground(new java.awt.Color(51, 255, 153));
        btnDoctorReviews.setIcon(new javax.swing.ImageIcon("/Users/mrs.katey/Desktop/Sap Images/3d check mark.png")); // NOI18N
        btnDoctorReviews.setText("See detailed reviews");
        btnDoctorReviews.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnDoctorReviews.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDoctorReviewsActionPerformed(evt);
            }
        });

        btn10am.setBackground(new java.awt.Color(51, 255, 153));
        btn10am.setText("10 am");
        btn10am.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn10amActionPerformed(evt);
            }
        });

        btn11am.setBackground(new java.awt.Color(51, 255, 153));
        btn11am.setText("11 am");
        btn11am.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn11amActionPerformed(evt);
            }
        });

        btn2pm.setBackground(new java.awt.Color(51, 255, 153));
        btn2pm.setText("2 pm");
        btn2pm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn2pmActionPerformed(evt);
            }
        });

        btn9am.setBackground(new java.awt.Color(51, 255, 153));
        btn9am.setText("9 am");
        btn9am.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn9amActionPerformed(evt);
            }
        });

        btn3pm.setBackground(new java.awt.Color(51, 255, 153));
        btn3pm.setText("3 pm");
        btn3pm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn3pmActionPerformed(evt);
            }
        });

        btn1pm.setBackground(new java.awt.Color(51, 255, 153));
        btn1pm.setText("1 pm");
        btn1pm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn1pmActionPerformed(evt);
            }
        });

        btnConfirmDoctorAppointment.setBackground(new java.awt.Color(51, 255, 153));
        btnConfirmDoctorAppointment.setText("Confirm Appointment with Primary Care");
        btnConfirmDoctorAppointment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmDoctorAppointmentActionPerformed(evt);
            }
        });

        jCheckBoxAttachPrescriptionToEmail.setText("Attach Current Prescription Report in email to send to primary care");

        jCheckBoxAttachInsuranceDetailsToEmail.setText("Attach insurance details in the email to be sent to primary care");
        jCheckBoxAttachInsuranceDetailsToEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxAttachInsuranceDetailsToEmailActionPerformed(evt);
            }
        });

        jCheckBoxSendAppointmentEmailConfirmation.setText("Send appointment confirmation email on <xxxxxx>");
        jCheckBoxSendAppointmentEmailConfirmation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxSendAppointmentEmailConfirmationActionPerformed(evt);
            }
        });

        jCheckBoxSendAppointmentTextConfirmation.setText("Send appointment confirmation text on <yyyyyy>");
        jCheckBoxSendAppointmentTextConfirmation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxSendAppointmentTextConfirmationActionPerformed(evt);
            }
        });

        jCheckBoxSendAppointmentRemiender.setText("Text me appointment remiender 2 hours before the appointment");
        jCheckBoxSendAppointmentRemiender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxSendAppointmentRemienderActionPerformed(evt);
            }
        });

        jTextFieldAppointmentDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldAppointmentDetailsActionPerformed(evt);
            }
        });

        lblOtherAppointmentDetails.setText("Other details:");

        jCheckBoxAttachVitalsToEmail.setText("Attach vitals report in email to send to primary care");
        jCheckBoxAttachVitalsToEmail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxAttachVitalsToEmailActionPerformed(evt);
            }
        });

        lblDoctorAddress.setText("Address:");

        lblDoctorAddressValue.setText("Not Available");

        lblCheckAvailability.setText("Check Availability");

        lblDoctorGender.setText("Gender:");

        lblDoctorGenderValue.setText("Not Available");

        jCheckBoxAttachPreviousLabReports.setText("Attach all previous lab reports");
        jCheckBoxAttachPreviousLabReports.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxAttachPreviousLabReportsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jBookAppointmentLayout = new javax.swing.GroupLayout(jBookAppointment);
        jBookAppointment.setLayout(jBookAppointmentLayout);
        jBookAppointmentLayout.setHorizontalGroup(
            jBookAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jBookAppointmentLayout.createSequentialGroup()
                .addGroup(jBookAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jBookAppointmentLayout.createSequentialGroup()
                        .addGap(80, 80, 80)
                        .addGroup(jBookAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jBookAppointmentLayout.createSequentialGroup()
                                .addGap(49, 49, 49)
                                .addComponent(lblAppointmentBook, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblDoctorTxt)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jBookAppointmentLayout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(jBookAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jBookAppointmentLayout.createSequentialGroup()
                                        .addComponent(lblDoctorSpeciality)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lblDoctorSpecialityValue))
                                    .addGroup(jBookAppointmentLayout.createSequentialGroup()
                                        .addGap(9, 9, 9)
                                        .addGroup(jBookAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(jBookAppointmentLayout.createSequentialGroup()
                                                .addGap(25, 25, 25)
                                                .addComponent(btnConfirmDoctorAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(jCheckBoxAttachInsuranceDetailsToEmail)
                                            .addComponent(jCheckBoxSendAppointmentTextConfirmation)
                                            .addComponent(jCheckBoxSendAppointmentRemiender)
                                            .addComponent(jCheckBoxSendAppointmentEmailConfirmation)))
                                    .addComponent(jCheckBoxAttachPrescriptionToEmail)
                                    .addComponent(jCheckBoxAttachVitalsToEmail)
                                    .addGroup(jBookAppointmentLayout.createSequentialGroup()
                                        .addGroup(jBookAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(jBookAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(jBookAppointmentLayout.createSequentialGroup()
                                                    .addComponent(lblDoctorReviews)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(btnDoctorReviews))
                                                .addGroup(jBookAppointmentLayout.createSequentialGroup()
                                                    .addComponent(lblDoctorAddress)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(lblDoctorAddressValue))
                                                .addGroup(jBookAppointmentLayout.createSequentialGroup()
                                                    .addComponent(lblDoctorName)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(lblDoctorNameValue)))
                                            .addGroup(jBookAppointmentLayout.createSequentialGroup()
                                                .addComponent(lblDoctorGender)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(lblDoctorGenderValue)
                                                .addGap(84, 84, 84)))
                                        .addGap(92, 92, 92)
                                        .addGroup(jBookAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jBookAppointmentLayout.createSequentialGroup()
                                                .addComponent(lblCheckAvailability)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(jDateChooserDoctorAvailability, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(jBookAppointmentLayout.createSequentialGroup()
                                                .addGroup(jBookAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(btn1pm)
                                                    .addComponent(btn9am))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(jBookAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jBookAppointmentLayout.createSequentialGroup()
                                                        .addComponent(btn10am)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(btn11am)
                                                        .addGap(42, 42, 42))
                                                    .addGroup(jBookAppointmentLayout.createSequentialGroup()
                                                        .addComponent(btn2pm, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(btn3pm, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                                    .addGroup(jBookAppointmentLayout.createSequentialGroup()
                                        .addComponent(lblOtherAppointmentDetails)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jTextFieldAppointmentDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jCheckBoxAttachPreviousLabReports)))))
                    .addGroup(jBookAppointmentLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        jBookAppointmentLayout.setVerticalGroup(
            jBookAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jBookAppointmentLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(btnBack)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblAppointmentBook, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addComponent(lblDoctorTxt)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(72, 72, 72)
                .addGroup(jBookAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jBookAppointmentLayout.createSequentialGroup()
                        .addGroup(jBookAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblDoctorName)
                            .addComponent(lblDoctorNameValue)
                            .addComponent(lblCheckAvailability))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jBookAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblDoctorSpeciality)
                            .addComponent(lblDoctorSpecialityValue))
                        .addGroup(jBookAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jBookAppointmentLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jBookAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblDoctorAddress)
                                    .addComponent(lblDoctorAddressValue)))
                            .addGroup(jBookAppointmentLayout.createSequentialGroup()
                                .addGap(9, 9, 9)
                                .addGroup(jBookAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btn9am)
                                    .addComponent(btn10am)
                                    .addComponent(btn11am))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jBookAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btn1pm)
                                    .addComponent(btn2pm)
                                    .addComponent(btn3pm)))
                            .addGroup(jBookAppointmentLayout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addGroup(jBookAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(lblDoctorGender)
                                    .addComponent(lblDoctorGenderValue))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jBookAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnDoctorReviews, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(lblDoctorReviews)))))
                    .addComponent(jDateChooserDoctorAvailability, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jCheckBoxAttachVitalsToEmail)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxAttachPrescriptionToEmail)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxAttachPreviousLabReports)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jBookAppointmentLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldAppointmentDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblOtherAppointmentDetails))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxAttachInsuranceDetailsToEmail)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addComponent(jCheckBoxSendAppointmentEmailConfirmation)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jCheckBoxSendAppointmentTextConfirmation)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jCheckBoxSendAppointmentRemiender)
                .addGap(18, 18, 18)
                .addComponent(btnConfirmDoctorAppointment, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(57, 57, 57)
                .addComponent(jBookAppointment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jBookAppointment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBoxAttachVitalsToEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxAttachVitalsToEmailActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_jCheckBoxAttachVitalsToEmailActionPerformed

    private void jTextFieldAppointmentDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldAppointmentDetailsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextFieldAppointmentDetailsActionPerformed

    private void jCheckBoxSendAppointmentRemienderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxSendAppointmentRemienderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxSendAppointmentRemienderActionPerformed

    private void jCheckBoxSendAppointmentTextConfirmationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxSendAppointmentTextConfirmationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxSendAppointmentTextConfirmationActionPerformed

    private void jCheckBoxSendAppointmentEmailConfirmationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxSendAppointmentEmailConfirmationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxSendAppointmentEmailConfirmationActionPerformed

    private void jCheckBoxAttachInsuranceDetailsToEmailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxAttachInsuranceDetailsToEmailActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxAttachInsuranceDetailsToEmailActionPerformed

    private void btnConfirmDoctorAppointmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmDoctorAppointmentActionPerformed
        // TODO add your handling code here:
        
        if (jCheckBoxAttachVitalsToEmail.isSelected()) {
            log.error("Selected jCheckBoxAttachVitalsToEmail");
        }
        
        if (jCheckBoxAttachPrescriptionToEmail.isSelected()) {
            log.error("Selected jCheckBoxAttachPrescriptionToEmail");
        }
        
        if (jCheckBoxAttachInsuranceDetailsToEmail.isSelected()) {
            log.error("Selected jCheckBoxAttachInsuranceDetailsToEmails");
        }
        
        if (jCheckBoxSendAppointmentEmailConfirmation.isSelected()) {
            log.error("Selected jCheckBoxSendAppointmentEmailConfirmation");
        }
        
        if (jCheckBoxSendAppointmentRemiender.isSelected()) {
            log.error("Selected jCheckBoxSendAppointmentRemiender");
        }
        
        if (jCheckBoxSendAppointmentTextConfirmation.isSelected()) {
            log.error("Selected jCheckBoxSendAppointmentTextConfirmation");
        }
        
        if (jCheckBoxAttachPreviousLabReports.isSelected()) {
            log.error("Selected jCheckBoxAttachPreviousLabReports");
        }
        
        String otherAppointmentDetails = jTextFieldAppointmentDetails.getText();
        
        log.error("** Appointment booked for patient " + patient.getPersonDetails().getFullName() + 
                " with doctor " + selectedDoctor.getPersonDetails().getFullName() + " on date " + 
                selectedAppointmentDate + " and time " + selectedAppointmentTime + ":00 hrs**");
        
        
        Appointment apt = new Appointment(patient, otherAppointmentDetails, selectedDoctor, selectedAppointmentDate, selectedAppointmentTime);
        selectedDoctor.addPatientAppointment(apt);
        patient.addDoctorAppointment(apt);
        btnConfirmDoctorAppointment.setEnabled(false);
    }//GEN-LAST:event_btnConfirmDoctorAppointmentActionPerformed

    private void btn1pmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn1pmActionPerformed
        // TODO add your handling code here:
        selectedAppointmentTime = 13;
        btn9am.setBackground(Color.GRAY);
        btn10am.setBackground(Color.GRAY);      
        btn11am.setBackground(Color.GRAY);
        btn1pm.setBackground(Color.YELLOW);
        btn2pm.setBackground(Color.GRAY);
        btn3pm.setBackground(Color.GRAY);
        
        enableAppointmentFields(true);
        
    }//GEN-LAST:event_btn1pmActionPerformed

    private void btn3pmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn3pmActionPerformed
        // TODO add your handling code here:
        selectedAppointmentTime = 15;
        btn9am.setBackground(Color.GRAY);
        btn10am.setBackground(Color.GRAY);      
        btn11am.setBackground(Color.GRAY);
        btn1pm.setBackground(Color.GRAY);
        btn2pm.setBackground(Color.GRAY);
        btn3pm.setBackground(Color.YELLOW);
        
        enableAppointmentFields(true);
    }//GEN-LAST:event_btn3pmActionPerformed

    private void btn9amActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn9amActionPerformed
        // TODO add your handling code here:
        selectedAppointmentTime = 9;
        btn9am.setBackground(Color.YELLOW);
        btn10am.setBackground(Color.GRAY);      
        btn11am.setBackground(Color.GRAY);
        btn1pm.setBackground(Color.GRAY);
        btn2pm.setBackground(Color.GRAY);
        btn3pm.setBackground(Color.GRAY);
        
        enableAppointmentFields(true);
        
    }//GEN-LAST:event_btn9amActionPerformed

    private void btn2pmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn2pmActionPerformed
        // TODO add your handling code here:
        selectedAppointmentTime = 14;
        btn9am.setBackground(Color.GRAY);
        btn10am.setBackground(Color.GRAY);      
        btn11am.setBackground(Color.GRAY);
        btn1pm.setBackground(Color.GRAY);
        btn2pm.setBackground(Color.YELLOW);
        btn3pm.setBackground(Color.GRAY);
        
        enableAppointmentFields(true);
    }//GEN-LAST:event_btn2pmActionPerformed

    private void btn11amActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn11amActionPerformed
        // TODO add your handling code here:
        selectedAppointmentTime = 11;
        btn9am.setBackground(Color.GRAY);
        btn10am.setBackground(Color.GRAY);      
        btn11am.setBackground(Color.YELLOW);
        btn1pm.setBackground(Color.GRAY);
        btn2pm.setBackground(Color.GRAY);
        btn3pm.setBackground(Color.GRAY);
        
        enableAppointmentFields(true);
    }//GEN-LAST:event_btn11amActionPerformed

    private void btn10amActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn10amActionPerformed
        // TODO add your handling code here:
        selectedAppointmentTime = 10;
        btn9am.setBackground(Color.GRAY);
        btn10am.setBackground(Color.YELLOW);      
        btn11am.setBackground(Color.GRAY);
        btn1pm.setBackground(Color.GRAY);
        btn2pm.setBackground(Color.GRAY);
        btn3pm.setBackground(Color.GRAY);
        
        enableAppointmentFields(true);
    }//GEN-LAST:event_btn10amActionPerformed

    private void btnDoctorReviewsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDoctorReviewsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnDoctorReviewsActionPerformed

    private void tblDoctorListMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDoctorListMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_tblDoctorListMouseExited

    private void tblDoctorListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblDoctorListMouseClicked
        // TODO add your handling code here:
        
        enableAppointmentFields(false);
        enableAppointmentAvailabilityButtons(false);
        enableDoctorFields(false);
        
        
        int selectedRow = tblDoctorList.getSelectedRow();
        if (selectedRow < 0) {
            log.error("Selected row from tblDoctorList is not >= 0");
            return;
        }
        
        String doctorUsername = (String) tblDoctorList.getModel().getValueAt(selectedRow, 0);
        selectedDoctor = (Doctor) ecoSystem.globalUserDirectory.get(doctorUsername);
        if (selectedDoctor == null) {
            log.error("No doctor exists for username: " + doctorUsername);
            return;
        }
        
        lblDoctorNameValue.setText(selectedDoctor.getPersonDetails().getFullName());
        lblDoctorSpecialityValue.setText(selectedDoctor.getSpeciality());
        lblDoctorAddressValue.setText(selectedDoctor.getPersonDetails().getAddress().toString());
        lblDoctorGenderValue.setText(selectedDoctor.getPersonDetails().getGender().toString());
        setupDoctorAppointmentCalander();
        enableDoctorFields(true);

    }//GEN-LAST:event_tblDoctorListMouseClicked

    private void enableAppointmentFields(boolean isEnabled) {
        jCheckBoxAttachInsuranceDetailsToEmail.setEnabled(isEnabled);
        jCheckBoxAttachPrescriptionToEmail.setEnabled(isEnabled);
        jCheckBoxAttachVitalsToEmail.setEnabled(isEnabled);
        jCheckBoxSendAppointmentEmailConfirmation.setEnabled(isEnabled);
        jCheckBoxSendAppointmentRemiender.setEnabled(isEnabled);
        jCheckBoxSendAppointmentTextConfirmation.setEnabled(isEnabled);
        jCheckBoxAttachPreviousLabReports.setEnabled(isEnabled);
        lblOtherAppointmentDetails.setEnabled(isEnabled);
        jTextFieldAppointmentDetails.setEnabled(isEnabled);
        btnConfirmDoctorAppointment.setEnabled(isEnabled);
    }
    
    private void enableAppointmentAvailabilityButtons(boolean isEnabled) {
        btn9am.setEnabled(isEnabled);
        btn10am.setEnabled(isEnabled);      
        btn11am.setEnabled(isEnabled);
        btn1pm.setEnabled(isEnabled);
        btn2pm.setEnabled(isEnabled);
        btn3pm.setEnabled(isEnabled);
    }
    
    private void enableDoctorFields(boolean isEnabled) {
        lblDoctorName.setEnabled(isEnabled);
        lblDoctorNameValue.setEnabled(isEnabled);
        lblDoctorSpeciality.setEnabled(isEnabled);
        lblDoctorSpecialityValue.setEnabled(isEnabled);
        lblDoctorAddress.setEnabled(isEnabled);
        lblDoctorAddressValue.setEnabled(isEnabled);
        lblDoctorGender.setEnabled(isEnabled);
        lblDoctorGenderValue.setEnabled(isEnabled);
        lblDoctorReviews.setEnabled(isEnabled);
        btnDoctorReviews.setEnabled(isEnabled);
        lblCheckAvailability.setEnabled(isEnabled);
        lblCheckAvailability.setEnabled(isEnabled);
        jDateChooserDoctorAvailability.setEnabled(isEnabled);
    }
    
    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        nextScreen(WorkAreaPanel, new PatientHomePagePanel(WorkAreaPanel, ecoSystem, patient), "PatientHomePagePanel");
    }//GEN-LAST:event_btnBackActionPerformed

    private void jCheckBoxAttachPreviousLabReportsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxAttachPreviousLabReportsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBoxAttachPreviousLabReportsActionPerformed

    private void setupDoctorAppointmentCalander() {
        jDateChooserDoctorAvailability.setMinSelectableDate(Date.from(Instant.now()));
        jDateChooserDoctorAvailability.setMaxSelectableDate(Date.from(Instant.now().plusMillis(1728000000))); // 20 days
        
        jDateChooserDoctorAvailability.addPropertyChangeListener(new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent evt) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                
                Object newValue = evt.getNewValue();
                if (newValue instanceof Date) {
                    log.debug("Selected appointment date = " + (Date) newValue);
                    selectedAppointmentDate = LocalDate.ofInstant(((Date) newValue).toInstant(), ZoneId.systemDefault()); ;
                    updateDoctorAvailabilityButtons((Date) newValue);
                    btnConfirmDoctorAppointment.setEnabled(true);
                }
            }
        });
    }
    
    private void updateDoctorAvailabilityButtons(Date selectedAppointmentDate) {
        btn9am.setEnabled(false);
        btn10am.setEnabled(false);      
        btn11am.setEnabled(false);
        btn1pm.setEnabled(false);
        btn2pm.setEnabled(false);
        btn3pm.setEnabled(false);
        
        
        LocalDate localDate = selectedAppointmentDate.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        if (selectedDoctor.isDoctorAvailable(localDate, 9)) {
            btn9am.setEnabled(true);
        }
        
        if (selectedDoctor.isDoctorAvailable(localDate, 10)) {
            btn10am.setEnabled(true);
        }
        
        if (selectedDoctor.isDoctorAvailable(localDate, 11)) {
            btn11am.setEnabled(true);
        }
        
        if (selectedDoctor.isDoctorAvailable(localDate, 13)) {
            btn1pm.setEnabled(true);
        }
        
        if (selectedDoctor.isDoctorAvailable(localDate, 14)) {
            btn2pm.setEnabled(true);
        }
        
        if (selectedDoctor.isDoctorAvailable(localDate, 15)) {
            btn3pm.setEnabled(true);
        }
    }

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn10am;
    private javax.swing.JButton btn11am;
    private javax.swing.JButton btn1pm;
    private javax.swing.JButton btn2pm;
    private javax.swing.JButton btn3pm;
    private javax.swing.JButton btn9am;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnConfirmDoctorAppointment;
    private javax.swing.JButton btnDoctorReviews;
    private javax.swing.JPanel jBookAppointment;
    private com.toedter.calendar.JCalendarBeanInfo jCalendarBeanInfo1;
    private com.toedter.calendar.JCalendarBeanInfo jCalendarBeanInfo2;
    private javax.swing.JCheckBox jCheckBoxAttachInsuranceDetailsToEmail;
    private javax.swing.JCheckBox jCheckBoxAttachPrescriptionToEmail;
    private javax.swing.JCheckBox jCheckBoxAttachPreviousLabReports;
    private javax.swing.JCheckBox jCheckBoxAttachVitalsToEmail;
    private javax.swing.JCheckBox jCheckBoxSendAppointmentEmailConfirmation;
    private javax.swing.JCheckBox jCheckBoxSendAppointmentRemiender;
    private javax.swing.JCheckBox jCheckBoxSendAppointmentTextConfirmation;
    private com.toedter.calendar.JDateChooserCellEditor jDateChooserCellEditor1;
    private com.toedter.calendar.JDateChooser jDateChooserDoctorAvailability;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextFieldAppointmentDetails;
    private javax.swing.JLabel lblAppointmentBook;
    private javax.swing.JLabel lblCheckAvailability;
    private javax.swing.JLabel lblDoctorAddress;
    private javax.swing.JLabel lblDoctorAddressValue;
    private javax.swing.JLabel lblDoctorGender;
    private javax.swing.JLabel lblDoctorGenderValue;
    private javax.swing.JLabel lblDoctorName;
    private javax.swing.JLabel lblDoctorNameValue;
    private javax.swing.JLabel lblDoctorReviews;
    private javax.swing.JLabel lblDoctorSpeciality;
    private javax.swing.JLabel lblDoctorSpecialityValue;
    private javax.swing.JLabel lblDoctorTxt;
    private javax.swing.JLabel lblOtherAppointmentDetails;
    private javax.swing.JTable tblDoctorList;
    // End of variables declaration//GEN-END:variables
}

