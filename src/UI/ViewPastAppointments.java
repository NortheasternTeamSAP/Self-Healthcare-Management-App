/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import Dietitian.DietitianAppointment;
import EcoSystem.EcoSystem;
import Patient.Patient;
import java.awt.CardLayout;
import java.awt.Component;
import java.time.LocalDate;
import java.util.ArrayList;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author preet
 */
public class ViewPastAppointments extends javax.swing.JPanel {
    JPanel WorkArea;
    EcoSystem system;
    ArrayList<Dietitian.DietitianAppointment> dietitianAppointments;
    int flag=0;
    /**
     * Creates new form ViewPastAppointments
     */
    public ViewPastAppointments(JPanel WorkArea,EcoSystem system,ArrayList<DietitianAppointment> k,int flag) {
        initComponents();
        this.setSize(1100,850);
         this.WorkArea=WorkArea;
        this.system=system;
        this.dietitianAppointments=k;
        this.flag=flag;
        if(flag==0){
             populatepastPatientAppointment();
       }
        else {
         
           populatepastDietitianAppointment();
        }
      
    }
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblpastAppointments = new javax.swing.JTable();
        backd = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tblpastAppointments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient Name", "Past Appointment Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblpastAppointments);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(84, 153, 723, 396));

        backd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images_icons/back.png"))); // NOI18N
        backd.setContentAreaFilled(false);
        backd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backdActionPerformed(evt);
            }
        });
        add(backd, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, -1, 31));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("My Past Appointments");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(84, 81, 294, 28));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images_icons/polygonal-bg1100X850.jpg"))); // NOI18N
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(1, -4, 1100, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void backdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backdActionPerformed
        
        if(flag==0){
        WorkArea.remove(this);
        Component[] componentArray = WorkArea.getComponents();
        Component component = componentArray[componentArray.length - 1];
        CardLayout layout = (CardLayout)WorkArea.getLayout();
        DietitianDashboard p=(DietitianDashboard)component;
        p.populateupcomingAppointments();
        layout.previous(WorkArea);
       
       }
        else{
        
        WorkArea.remove(this);
        Component[] componentArray = WorkArea.getComponents();
        Component component = componentArray[componentArray.length - 1];
        CardLayout layout = (CardLayout)WorkArea.getLayout();
        PatientDieticianDashboard p=(PatientDieticianDashboard)component;
        p.populateUpcomingDieticianAppointments();       
        layout.previous(WorkArea);
    
        }
   
    }//GEN-LAST:event_backdActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backd;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblpastAppointments;
    // End of variables declaration//GEN-END:variables

    private void populatepastDietitianAppointment() {
        
 DefaultTableModel model = (DefaultTableModel) tblpastAppointments.getModel();
 ArrayList<DietitianAppointment> temp=new ArrayList();
 tblpastAppointments.getTableHeader().getColumnModel().getColumn(0).setHeaderValue("Dietitian Name ");
 temp=dietitianAppointments; 
  model.setRowCount(0);      
        for(int i=0;i<dietitianAppointments.size();i++)
    {
        if(temp.get(i).getDate().isBefore(LocalDate.now()) || temp.get(i).getDone()==true){
       Object row[] = new Object[2];
                row[0] = temp.get(i).getDietitian().getDietitianDetails().getFullName();
                row[1] = temp.get(i).getDate();
                model.addRow(row);
    }
    }  
        
        
        
      
    }

    private void populatepastPatientAppointment() {
       
 DefaultTableModel model = (DefaultTableModel) tblpastAppointments.getModel();
 ArrayList<DietitianAppointment> temp=new ArrayList();
 temp=dietitianAppointments; 
 model.setRowCount(0);       
        for(int i=0;i<dietitianAppointments.size();i++)
    {
        if(temp.get(i).getDate().isBefore(LocalDate.now()) || temp.get(i).getDone()==true){
       Object row[] = new Object[2];
                row[0] = temp.get(i).getPatient().getPatientDetails().getFullName();
                row[1] = temp.get(i).getDate();
                model.addRow(row);
    }
    
    }
}
}
