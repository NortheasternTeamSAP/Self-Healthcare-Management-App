/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import Dietitian.DietitianAppointment;
import EcoSystem.EcoSystem;
import Patient.Patient;
import java.awt.CardLayout;
import java.awt.Component;
import java.time.LocalDate;
import java.util.ArrayList;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author preet
 */
public class ViewPastAppointments extends javax.swing.JPanel {
    JPanel WorkArea;
    EcoSystem system;
    ArrayList<Dietitian.DietitianAppointment> dietitianAppointments;
    int flag=0;
    /**
     * Creates new form ViewPastAppointments
     */
    public ViewPastAppointments(JPanel WorkArea,EcoSystem system,ArrayList<DietitianAppointment> k,int flag) {
        initComponents();
         this.WorkArea=WorkArea;
        this.system=system;
        this.dietitianAppointments=k;
        this.flag=flag;
        if(flag==1){  
        populatepastDietitianAppointment();}
        else {
          populatepastPatientAppointment();
        }
      
    }
   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblpastAppointments = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        tblpastAppointments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Patient Name", "Past Appointment Date"
            }
        ));
        jScrollPane1.setViewportView(tblpastAppointments);

        jButton2.setText("Back");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("My Past Appointments");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(84, 84, 84)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(83, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jButton2)
                .addGap(35, 35, 35)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(111, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        WorkArea.remove(this);
        Component[] componentArray = WorkArea.getComponents();
        Component component = componentArray[componentArray.length - 1];
        CardLayout layout = (CardLayout)WorkArea.getLayout();
        layout.previous(WorkArea);

    }//GEN-LAST:event_jButton2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblpastAppointments;
    // End of variables declaration//GEN-END:variables

    private void populatepastDietitianAppointment() {
        
 DefaultTableModel model = (DefaultTableModel) tblpastAppointments.getModel();
 ArrayList<DietitianAppointment> temp=new ArrayList();
 tblpastAppointments.getTableHeader().getColumnModel().getColumn(0).setHeaderValue("Dietitian Name ");
 temp=dietitianAppointments; 
  model.setRowCount(0);      
        for(int i=0;i<dietitianAppointments.size();i++)
    {
        if(temp.get(i).getDate().isBefore(LocalDate.now())){
       Object row[] = new Object[2];
                row[0] = temp.get(i).getDietitian().getDietitianDetails().getFullName();
                row[1] = temp.get(i).getDate();
                model.addRow(row);
    }
    }  
        
        
        
      
    }

    private void populatepastPatientAppointment() {
       
 DefaultTableModel model = (DefaultTableModel) tblpastAppointments.getModel();
 ArrayList<DietitianAppointment> temp=new ArrayList();
 temp=dietitianAppointments; 
 model.setRowCount(0);       
        for(int i=0;i<dietitianAppointments.size();i++)
    {
        if(temp.get(i).getDate().isBefore(LocalDate.now())){
       Object row[] = new Object[2];
                row[0] = temp.get(i).getPatient().getPatientDetails().getFullName();
                row[1] = temp.get(i).getDate();
                model.addRow(row);
    }
    
    }
}
}
