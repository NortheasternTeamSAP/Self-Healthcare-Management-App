/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UI;

import Counselor.CounselorAppointment;
import EcoSystem.EcoSystem;
import FitnessTrainer.FitnessTrainerAppointment;
import java.awt.CardLayout;
import java.awt.Component;
import java.time.LocalDate;
import java.util.ArrayList;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author preet
 */
public class ViewPastAppointmentCounselor extends javax.swing.JPanel {
  JPanel WorkArea;
  EcoSystem system;
  ArrayList<CounselorAppointment> counselorAppointments;
  int flag=0;
    /**
     * Creates new form ViewPastAppointmentCounselor
     */
    public ViewPastAppointmentCounselor(JPanel WorkArea,EcoSystem system,ArrayList<CounselorAppointment> d,int flag) {
        initComponents();
        this.setSize(1100,850);
        this.WorkArea=WorkArea;
        this.system=system;
        this.counselorAppointments=d;
        this.flag=flag;
        if(flag==1){  
        populatepastCounselorAppointment();
          }
        else {
       populatepastpaitentcounselorappointment();
      
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backp = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblpastAppointments = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        backp.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images_icons/back.png"))); // NOI18N
        backp.setContentAreaFilled(false);
        backp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backpActionPerformed(evt);
            }
        });
        add(backp, new org.netbeans.lib.awtextra.AbsoluteConstraints(17, 65, -1, 31));

        tblpastAppointments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Patient Name", "Past Appointment Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblpastAppointments);

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(87, 137, 692, 279));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("My Past Appointments");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(87, 65, 273, 28));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images_icons/polygonal-bg1100X850.jpg"))); // NOI18N
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1100, 850));
    }// </editor-fold>//GEN-END:initComponents

    private void backpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backpActionPerformed

        if(flag==0){ WorkArea.remove(this);
            Component[] componentArray = WorkArea.getComponents();
            Component component = componentArray[componentArray.length - 1];
            CounselorDashboard panel = (CounselorDashboard) component;
            panel.populateupcomingAppointments();
            CardLayout layout = (CardLayout)WorkArea.getLayout();
            layout.previous(WorkArea);}

        else{
            WorkArea.remove(this);
            Component[] componentArray = WorkArea.getComponents();
            Component component = componentArray[componentArray.length - 1];
            PatientCounselorDashboard panel = (PatientCounselorDashboard) component;
            panel.populateUpcomingCounselorAppointments();
            CardLayout layout = (CardLayout)WorkArea.getLayout();
            layout.previous(WorkArea);}
    }//GEN-LAST:event_backpActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backp;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblpastAppointments;
    // End of variables declaration//GEN-END:variables

    private void populatepastCounselorAppointment() {
 DefaultTableModel model = (DefaultTableModel) tblpastAppointments.getModel();
 ArrayList<CounselorAppointment> temp=new ArrayList();
 temp=counselorAppointments; 
 tblpastAppointments.getTableHeader().getColumnModel().getColumn(0).setHeaderValue("Counselor Name");
 model.setRowCount(0);       
        for(int i=0;i<temp.size();i++)
    {
        if(temp.get(i).getDate().isBefore(LocalDate.now()) || temp.get(i).getDone()==true){
       Object row[] = new Object[2];
                row[0] = temp.get(i).getCounselor().getPersonDetails().getFullName();
                row[1] = temp.get(i).getDate();
                model.addRow(row);
    }
    }       
    }

private void populatepastpaitentcounselorappointment() {
 DefaultTableModel model = (DefaultTableModel) tblpastAppointments.getModel();
 ArrayList<CounselorAppointment> temp=new ArrayList();
 temp=counselorAppointments; 
 model.setRowCount(0);       
        for(int i=0;i<temp.size();i++)
    {
        if(temp.get(i).getDate().isBefore(LocalDate.now()) || temp.get(i).getDone()==true){
         Object row[] = new Object[2];
                row[0] = temp.get(i).getPatient().getPatientDetails().getFullName();
                row[1] = temp.get(i).getDate();
                model.addRow(row);
    }
    }   
    }
}
